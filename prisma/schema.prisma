// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  pluralize       = true
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["may", "shaple_builder"]
}

model Organization {
  id        Int          @id @default(autoincrement()) @map("id")
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  deletedAt Int          @default(0) @map("deleted_at")
  name      String       @unique @map("name")
  ownerId   Int
  owner     User         @relation("Owner", fields: [ownerId], references: [id])
  members   Membership[]

  @@map("organizations")
  @@schema("may")
}

model Membership {
  id             Int          @id @default(autoincrement())
  userId         Int          @map("user_id")
  organizationId Int          @map("organization_id")
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId])
  @@map("memberships")
  @@schema("may")
}

model User {
  id                 Int            @id @default(autoincrement()) @map("id")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  deletedAt          Int            @default(0) @map("deleted_at")
  ownerId            String         @unique @map("owner_id")
  description        String?        @map("description")
  threads            Thread[]
  ownedOrganizations Organization[] @relation("Owner")
  memberships        Membership[]

  @@map("users")
  @@schema("may")
}

model Thread {
  id              Int            @id @default(autoincrement()) @map("id")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       Int            @default(0) @map("deleted_at")
  authorId        Int            @map("author_id")
  author          User           @relation(fields: [authorId], references: [id])
  openaiThreadId  String         @map("openai_thread_id")
  shapleStackId   Int?           @unique @map("shaple_stack_id")
  shapleStack     ShapleStack?   @relation(fields: [shapleStackId], references: [id])
  shapleProjectId Int?           @map("shaple_project_id")
  shapleProject   ShapleProject? @relation(fields: [shapleProjectId], references: [id])

  state     String @default("none") @map("state")
  stateInfo Json?  @map("state_info")

  @@map("threads")
  @@schema("may")
}

model ShapleStack {
  id     Int     @id @default(autoincrement()) @map("id")
  thread Thread?

  @@map("stacks")
  @@schema("shaple_builder")
}

model ShapleProject {
  id      Int      @id @default(autoincrement()) @map("id")
  threads Thread[]

  @@map("projects")
  @@schema("shaple_builder")
}

model ShapleUser {
  id               Int      @id @default(autoincrement()) @map("id")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  deletedAt        BigInt   @default(0) @map("deleted_at")
  gitPrivateKeyPem Bytes?   @map("git_private_key_pem")
  ownerId          String   @unique @map("owner_id")
  name             String   @map("name")

  @@map("users")
  @@schema("shaple_builder")
}
